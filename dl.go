// +build nobuild

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"sync"

	"github.com/PuerkitoBio/goquery"
	"github.com/pkg/errors"
	"golang.org/x/sync/errgroup"
)

func main() {
	fh, err := os.Create("generated.go")
	if err != nil {
		log.Fatal(err)
	}
	err = Download(fh)
	if closeErr := fh.Close(); closeErr != nil && err == nil {
		err = closeErr
	}
	if err != nil {
		log.Fatal(err)
	}
}

const URL = "http://www.1000mostcommonwords.com/"

var rURL = regexp.MustCompile(
	`href="(` +
		strings.Replace(URL, "://www.", "://(?:www[.])?", 1) +
		`(?:words/)?1000-(?:most-)?common-([^-]+)-words)"`,
)

func Download(w io.Writer) error {
	resp, err := http.Get(URL)
	if err != nil {
		return errors.Wrap(err, URL)
	}
	b, err := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	bw := bufio.NewWriter(w)
	fmt.Fprintf(bw, `// Generated by dl.go, DO NOT EDIT!

package main

func init() {
`)
	var mu sync.Mutex
	var grp errgroup.Group
	for _, loc := range rURL.FindAllSubmatchIndex(b, 100) {
		k, v := string(b[loc[2*2]:loc[2*2+1]]), b[loc[2*1]:loc[2*1+1]]
		v = bytes.Replace(v, []byte("/www."), []byte("/"), 1)
		v = bytes.Replace(v, []byte("/words/"), []byte("/"), 1)
		u := string(v)
		words := make([]string, 0, 1000)
		grp.Go(func() error {
			log.Println(u)
			doc, err := goquery.NewDocument(u)
			if err := errors.Wrap(err, u); err != nil {
				return err
			}
			nth := "2"
			if strings.Contains(u, "-english-") {
				nth = "3"
			}
			doc.Find(".entry-content > table > tbody > tr > td:nth-child(" + nth + ")").
				Each(func(i int, s *goquery.Selection) {
					words = append(words, s.Text())
				})
			mu.Lock()
			fmt.Fprintf(bw, "\twordsMap[%q] = []string{\n", k)
			for _, w := range words {
				fmt.Fprintf(bw, "\t\t%q,\n", w)
			}
			fmt.Fprintf(bw, "\t}\n")
			mu.Unlock()
			return nil
		})
	}

	err = errors.Wrap(err, URL)
	if wErr := grp.Wait(); wErr != nil && err == nil {
		err = wErr
	}
	bw.WriteString("\n}\n")
	return bw.Flush()
}
