// +build nobuild

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"regexp"
	"strings"
	"sync"

	"github.com/PuerkitoBio/goquery"
	"github.com/google/renameio"
	"golang.org/x/sync/errgroup"
)

func main() {
	if err := Main(); err != nil {
		log.Fatalf("%+v", err)
	}
}

func Main() error {
	fh, err := renameio.TempFile("", "generated.go")
	if err != nil {
		return err
	}
	defer fh.Cleanup()
	if err = Download(fh); err != nil {
		return err
	}
	return fh.CloseAtomicallyReplace()
}

const concurrency = 8
const URL = "http://www.1000mostcommonwords.com/"

var rURL = regexp.MustCompile(
	`href="(` +
		strings.Replace(URL, "://www.", "://(?:www[.])?", 1) +
		`(?:words/)?1000-(?:most-)?common-([^-]+)-words)/*"`,
)

func Download(w io.Writer) error {
	client := &http.Client{CheckRedirect: func(req *http.Request, via []*http.Request) error { 
		log.Println("req:", req.URL, "via:", via)
		return nil
	}}
	resp, err := client.Get(URL)
	if err != nil {
		return fmt.Errorf("%s: %w", URL, err)
	}
	b, err := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		return err
	}
	bw := bufio.NewWriter(w)
	fmt.Fprintf(bw, `// Generated by dl.go, DO NOT EDIT!

package main

func init() {
	wordsMap = generatedWordsMap
}

var generatedWordsMap = map[string]stringWithLengths{
`)
	limit := make(chan struct{}, concurrency)
	var mu sync.Mutex
	var grp errgroup.Group
	var token struct{}
	for _, loc := range rURL.FindAllSubmatchIndex(b, 1001) {
		k, v := string(b[loc[2*2]:loc[2*2+1]]), b[loc[2*1]:loc[2*1+1]]
		v = bytes.Replace(v, []byte("/www."), []byte("/"), 1)
		v = bytes.Replace(v, []byte("/words/"), []byte("/"), 1)
		u := string(v)
		limit <- token
		grp.Go(func() error {
			defer func() { <-limit }()

			log.Println(string(k), u)
			resp, err := client.Get(u)
			if err != nil {
				return fmt.Errorf("%s: %w", u, err)
			}
			defer resp.Body.Close()
			doc, qErr := goquery.NewDocumentFromResponse(resp)
			if qErr != nil {
				return fmt.Errorf("%s: %w", u, qErr)
			}
			nth := "2"
			if strings.Contains(u, "-english-") {
				nth = "3"
			}
			var buf, lengths strings.Builder
			doc.Find(".entry-content > table > tbody > tr > td:nth-child(" + nth + ")").
				Each(func(i int, s *goquery.Selection) {
					if i == 0 {
						return
					}
					text := strings.TrimSpace(s.Text())
					if text == "" {
						continue
					}
					buf.WriteString(text)
					if i != 1 {
						lengths.WriteByte(',')
					}
					fmt.Fprintf(&lengths, "%d", len(text))
				})
			if buf.Len() <= 1 {
				log.Printf("WARN: no words for %q in %q!", k, u)
				return nil
			}
			mu.Lock()
			fmt.Fprintf(bw, "\t%q: stringWithLengths{\n\t\tWords: %q,\n\t\tLengths: []uint8{%s},\n\t},\n",
				k, buf.String(), lengths.String())
			mu.Unlock()
			return nil
		})
	}

	if err != nil {
		err = fmt.Errorf("%s: %w", URL, err)
	}
	if wErr := grp.Wait(); wErr != nil && err == nil {
		err = wErr
	}
	bw.WriteString("\n}\n")
	if wErr := bw.Flush(); wErr != nil && err == nil {
		err = wErr
	}
	return err
}
